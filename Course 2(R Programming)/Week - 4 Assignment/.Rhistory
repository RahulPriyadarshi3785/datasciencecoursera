for(i in 1:ncol(t.d)){
odd<-c(odd,t.d[t.d[[i]]%%2==1,i])
even<-c(even,t.d[t.d[[i]]%%2 == 0,i])
}
if(TRUE){
odd<-t.d[t.d[[1]]%%2,1]
even<-t.d[t.d[[1]]%%2 == 0,1]
odd<-c(odd,t.d[t.d[[2]]%%2,2])
even<-c(even,t.d[t.d[[2]]%%2 == 0,2])
odd<-c(odd,t.d[t.d[[3]]%%2==1,3])
even<-c(even,t.d[t.d[[3]]%%2 == 0,3])
}
t.d
odd
even
m[m%%2 == 1]
m[m%%2 == 0]
t.d[t.d[[1]]%%2==1
odd<-c()
even<-c()
for(i in 1:ncol(t.d)){
odd<-c(odd,t.d[t.d[[i]]%%2==1,i])
even<-c(even,t.d[t.d[[i]]%%2 == 0,i])
}
if(TRUE){
odd<-t.d[t.d[[1]]%%2,1]
even<-t.d[t.d[[1]]%%2 == 0,1]
odd<-c(odd,t.d[t.d[[2]]%%2,2])
even<-c(even,t.d[t.d[[2]]%%2 == 0,2])
odd<-c(odd,t.d[t.d[[3]]%%2==1,3])
even<-c(even,t.d[t.d[[3]]%%2 == 0,3])
}
t.d
odd
even
m[m%%2 == 1]
m[m%%2 == 0]
v <- t.d[t.d[[1]]%%2==1
odd<-c()
even<-c()
for(i in 1:ncol(t.d)){
odd<-c(odd,t.d[t.d[[i]]%%2==1,i])
even<-c(even,t.d[t.d[[i]]%%2 == 0,i])
}
if(TRUE){
odd<-t.d[t.d[[1]]%%2,1]
even<-t.d[t.d[[1]]%%2 == 0,1]
odd<-c(odd,t.d[t.d[[2]]%%2,2])
even<-c(even,t.d[t.d[[2]]%%2 == 0,2])
odd<-c(odd,t.d[t.d[[3]]%%2==1,3])
even<-c(even,t.d[t.d[[3]]%%2 == 0,3])
}
t.d
odd
even
m[m%%2 == 1]
m[m%%2 == 0]
class(t.d[t.d[[1]]%%2==1)
odd<-c()
even<-c()
for(i in 1:ncol(t.d)){
odd<-c(odd,t.d[t.d[[i]]%%2==1,i])
even<-c(even,t.d[t.d[[i]]%%2 == 0,i])
}
if(TRUE){
odd<-t.d[t.d[[1]]%%2,1]
even<-t.d[t.d[[1]]%%2 == 0,1]
odd<-c(odd,t.d[t.d[[2]]%%2,2])
even<-c(even,t.d[t.d[[2]]%%2 == 0,2])
odd<-c(odd,t.d[t.d[[3]]%%2==1,3])
even<-c(even,t.d[t.d[[3]]%%2 == 0,3])
}
t.d
odd
even
m[m%%2 == 1]
m[m%%2 == 0]
even<-c()
for(i in 1:ncol(t.d)){
odd<-c(odd,t.d[t.d[[i]]%%2==1,i])
even<-c(even,t.d[t.d[[i]]%%2 == 0,i])
}
t.d[[1]]%%2==1
t.d
t.d
t.d[[1]]%%2==1
t.d[t.d[[1]]%%2==1,1]
q()
cat("Rahul","Priyadarshi")
cat("Rahul","Priyadarshi",sep="-")
typeof(x)
typeof(cat("Rahul","Priyadarshi"))
typeof(x)
typeof(8)
typeof(1:4)
x<-c("Rahul","Richa")
subsplit("Rahul","")
strsplit("Rahul","")
strsplit(x,"")
q()
adv <- rnorm(30,400,200)
sales <- rnorm(30,4000,1000)
plot(sales~adv)
plot(sales~adv, type = "p")
plot(sales~adv)
plot(sales~adv, type = "p")
plot(adv,sales)
plot(sales~adv,main = "Sales vs. Advertising Expenses")
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab <- "Advertising Expenses",
ylab <- "Sales in Thousands")
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands")
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
xlim = c(200,600))
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
ylim = c(3000,4000))
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
font.main = 4)
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
font.main = 1)
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
font.main = 5)
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
font.main = 5, col = red)
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
font.main = 5, col = "red")
colors()
q()
1.07^2
1.07^80
(1.07^80)*2
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("Rcpp")
find.package("KernSmooth")
library(KernSmooth)
exit
exit()
quit
quit()
clc
clear
clc()
clear()
available.packages()
a <- available.packages()
types(a)
type(a)
typeof(a)
a <- available.packages();
a <- available.packages();
quit()
find.package("slidify")
install.packages("slidify")
install.packages("slidify")
install.packages("ggplot2")
source("http::/bioconductor.org/biocLite.R")
load(ggplot2)
library(ggplot2)
search()
biocLite()
find_rtools()
find.package("devtools")
find_rtools()
install.packages("Rcpp")
install.packages("Rcpp")
find_rtools()
library(devtools)
find_rtools()
quit
quit()
q()
install.packages("swirl")
package_version("swirl")
package_version(swirl)
packageVersion(swirl)
packageVersion("swirl")
library(swirl)
swirl()
swirl()
library(swirl)
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <-  rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(x, y), 100)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/o
0/0
Inf - Inf
x
play()
DT = data.table(x=c(1,NaN,NA,3), y=c(NA_integer_, 1:3), z=c("a", NA_character_, "b", "c"))
y <- x
na.omit(y)
y
na.omit(DT, cols="x")
na.omit(y, cols="y")
nxt()
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)
]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect) <- c("foo" , "bar", "norf")
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo" , "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")
]
my_vector <- seq(1, 20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- (seq(1,20), 4, 5)
my_matrix2 <- matrix(seq(1,20), 4, 5)
play()
my_matrix2 <- matrix(seq(1,20), nrow = 4, ncol = 5)
my_matrix2
args(matrix)
nxt()
identical(my_matrix, my_matrix2)
patients <- c(Bill, Gina, Kelly, Sean)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age",
| "weight", "bp", "rating", "test")
cnames <- c("patient", "age",
"weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
bye()
?`%in%`
1:10 %in% c(1,3,5,9)
?sample
x <- 1:10
sample(x[x >  8])
sample(x[x >  9])
q()
q()
lapply
x <- list(a = 1:5, b = rnorm(10))
x
?rnorm
x <-  list(a = 1:4, b = rnorm(10), c = rnorm(20,1), d = rnorm(100,5))
lapply(x, mean)
? runif
?rnorm
x <- 1:4
lapply(x, runif)
?rowSums
?rowsum
rowSums
x <- matrix(rnorm(200), 20, 10)
?quantile
args(quantile)
apply(x, 1, quantile, probs = c(0.25, 0.75))
?rowMeans
?mapply
?tapply
?gl
?split
?interaction
f1 <- gl(2,5)
f2 <-  gl(5,2)
interaction(f1,f2)
?str
str(1:12)
q()
?binom
?rbinom
choose(3,2)
?rbinom
q()
set.seed(1)
rpois(5, 2)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
setwd("F:/course/1/1.2/Week 4/Assignment & quiz")
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MN", "heart attack", 5000)
source("best.R")
best("TX", "heart failure")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MN", "heart attack", 5000)
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 3)
rankhospital("MD", "heart attack", 5)
rankhospital("MD", "heart attack", 6)
rankhospital("MD", "heart attack", 7)
source("rankhospital(copy).R")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
rankhospital("MD", "heart attack", 6)
rankhospital(("MD", "heart attack", 6)
rankhospital("MD", "heart attack", "worst")
source("rankhospital(copy).R")
rankhospital("MD", "heart attack", "worst")
"best" = 1
rankhospital("MD", "heart attack", "worst")
source("rankhospital(copy).R")
rankhospital("MD", "heart attack", "worst")
rankhospital <- function(state , outcome, num = "best") {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
States <- unique(data$State)
Outcomes <- c("heart attack", "heart failure", "pneumonia")
if(!(state %in% States) & !(outcome %in% Outcomes)){
stop(print("Invalid state"))
}
mortalityRates <- c(11, 17, 23)
colOfDeathIn30Days <- mortalityRates[outcome == Outcomes]
data[,colOfDeathIn30Days] <- as.numeric(data[,colOfDeathIn30Days])
newData <- na.omit(subset(data, data$State == state,
select = c(2,colOfDeathIn30Days)))
head(newData)
if(num > nrow(newData)){
return(NA)
}
hospitalsWithMortality <- newData[order(newData[,2], newData[,1]),]
if(num == "best") {
numRank <- 1
} else if(num == "worst") {
numRank <- nrow(hospitalsWithMortality)
} else {
numRank <- num
}
return(hospitalsWithMortality[numRank,1])
}
rankhospital(("MD", "heart attack", 6)
rankhospital("MD", "heart attack", 6)
rankhospital("MD", "heart attack", "worst")
head(newData)
View(rankhospital)
rm(list = ls())
source("rankHospital.R")
debug(rankhospital)
rankhospital("MD", "heart attack", "worst")
debug(rankhospital)
rankhospital("MD", "heart attack", "worst")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
States <- unique(data$State)
Outcomes <- c("heart attack", "heart failure", "pneumonia")
if(!(state %in% States) & !(outcome %in% Outcomes)){
stop(print("Invalid state"))
}
newData <- na.omit(subset(data, data$State,
select = c(2,7,colOfDeathIn30Days)))
?as.factor
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
States <- unique(data$State)
Outcomes <- c("heart attack", "heart failure", "pneumonia")
if(!(outcome %in% Outcomes)){
stop(print("Invalid state"))
}
newData <- na.omit(tapply(data, as.factor(data$State))[2,7,colOfDeathIn30Days]))
if(!("heart attack" %in% Outcomes)){
+     stop(print("Invalid state"))
+ }
if(!(outcome %in% Outcomes)){
stop(print("Invalid state"))
}
if(!("heart attack" %in% Outcomes)){
stop(print("Invalid state"))
}
newData <- na.omit(tapply(data, as.factor(data$State))[2,7,colOfDeathIn30Days])
rm(list = ls())
source("rankall.R")
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
tail(rankall("pneumonia", "worst"), 3)
source("rankall.R")
debug(rankall)
tail(rankall("pneumonia", "worst"), 3)
source("rankall1.R")
rm(list = ls())
source("rankall1.R")
tail(rankall("pneumonia", "worst"), 3)
debug(rankall)
tail(rankall("pneumonia", "worst"), 3)
q
source("rankall.R")
tail(rankall("pneumonia", "worst"), 3)
debug(rankall)
tail(rankall("pneumonia", "worst"), 3)
source("rankall.R")
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("pneumonia", "worst"), 3)
?as.data.frame
source("rankall.R")
tail(rankall("pneumonia", "worst"), 3)
source("rankall.R")
tail(rankall("pneumonia", "worst"), 3)
source("rankall.R")
tail(rankall("pneumonia", "worst"), 3)
source("rankall.R")
tail(rankall("pneumonia", "worst"), 3)
source("rankall.R")
tail(rankall("pneumonia", "worst"), 3)
source("rankall.R")
source("best.R")
source("rankhospital.R")
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, v2 == "HI")$v1)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$v1)
r
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$v1)
r <- rankall("heart attack", 4)
as.character(subset(r, v2 == "HI")$v1)
r <- rankall("heart attack", 4)
as.character(subset(r, r[,2] == "HI")$v1)
r
r <- rankall("pneumonia", "worst")
r
r <- rankall("heart failure", 10)
r
class( x <- c(4, TRUE))
x <- 1:4
y<-2:3
x+y
class(x+y)
q()
