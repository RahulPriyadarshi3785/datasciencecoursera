}
for(i in 1:nrow(m)){
for(j in 1:ncol(m)){
if(m[i,j] %% 2){
odd <- c(odd,m[i,j])
}else{
even <- c(even,m[i,j])
}
}
}
for(i in 1:nrow(m)){
ifelse(m[i,j <- j+1]%%2 & j < ncol(m)+1,odd <- c(odd,m[i,j]),even <- c(even,m[i,j]))
}
for(i in 1:nrow(m)){
ifelse(m[i]%%2,odd <- c(odd,m[i,j]),even <- c(even,m[i,j]))
}
even <- c()
odd<- c()
for(i in 1:nrow(m)){
ifelse(m[i]%%2,odd <- c(odd,m[i]),even <- c(even,m[i]))
}
even
odd
x<-c()
for(i in 1:nrow(m)){
x <- m[i]
ifelse(x%%2,odd <- c(odd,x),even <- c(even,x))
}
even
odd
m
x<-c()
for(i in 1:nrow(m)){
x <- m[i]
ifelse(x%%2,odd <- c(odd,x),even <- c(even,x))
i<- i+1
}
even
odd
t.d<-as.data.frame(m)
t.d
m
t.d$V4<-rep(0,nrow(t.d))
even <- c()
odd<- c()
t
t.d
t.d$V4 <- NULL
t.d
ifelse(t.d$* %% 2, odd <- c(odd,m[i,j]), even <- c(even,m[i,j]))
ifelse(t.d$V1 %% 2, odd <- c(odd,t.d$V1), even <- c(even,t.d$V1))
ifelse(t.d$V1 %% 2 == 1, odd <- c(odd,t.d$V1), even <- c(even,t.d$V1))
sapply(t.d,mean)
mean
help?mean
help,mean
class(t.d$V1)
typeof(t.d$V1)
typeof(t.d)
t.d
for(i in 1:nrow(m)){
t.d[[i]]
}
t.d[[1]]
for(i in 1:nrow(m)){
ifelse(t.d[[i]]%%2,odd <- c(odd,t.d[[i]]),even<- c(even,t.d[[i]]))
}
even
t.d
while(i>n(m)){
ifelse(t.d[[i]]%%2,odd <- c(odd,t.d[[i]]),even<- c(even,t.d[[i]]))
}
i<-1
while(i<ncol(m)+1){
ifelse(t.d[[i]]%%2,odd <- c(odd,t.d[[i]]),even<- c(even,t.d[[i]]))
i<-i+1
}
even
m
t.d
odd<-t.d[t.d$V1%%2,]
even<-t.d[t.d$V1%%2 == 0,]
odd
even
t.d
odd<-t.d[t.d$V1%%2,1]
even<-t.d[t.d$V1%%2 == 0,1]
odd
even
t.d[1]
ncol(t.d)
even<-t.d[t.d$V1%%2 == 0,i]
for(i in 1:ncol(t.d)){
odd<-t.d[t.d$V1%%2,i]
even<-t.d[t.d$V1%%2 == 0,i]
}
even
odd
t.d
for(i in 1:ncol(t.d)){
odd<-t.d[t.d$V1%%2,3]
even<-t.d[t.d$V1%%2 == 0,3]
}
odd
even
m
t.d
ncol(t.d)
odd<-t.d[t.d$V1%%2,1]
even<-t.d[t.d$V1%%2 == 0,1]
t.d
odd
even
even <- c()
m[m%%2]
m
m[m>50]
m[m%%2 == 0]
for(i in 1:ncol(t.d)){
odd<-t.d[t.d[[i]]%%2,i]
even<-t.d[t.d[[i]]%%2 == 0,i]
}
odd
odd
even
for(i in 1:ncol(t.d)){
odd<-t.d[t.d[[i]]%%2,1]
even<-t.d[t.d[[i]]%%2 == 0,1]
}
odd
even
odd<-t.d[t.d[[1]]%%2,1]
odd
even<-t.d[t.d[[1]]%%2 == 0,1]
even
odd<-t.d[t.d[[2]]%%2,2]
even<-t.d[t.d[[2]]%%2 == 0,2]
t.d
odd
even
odd<-t.d[t.d[[1]]%%2,1]
even<-t.d[t.d[[1]]%%2 == 0,1]
odd<-t.d[t.d[[2]]%%2,2]
even<-t.d[t.d[[2]]%%2 == 0,2]
odd<-t.d[t.d[[3]]%%2,3]
even<-t.d[t.d[[3]]%%2 == 0,3]
odd
even
class(t.d[t.d[[1]]%%2,1])
typeof(t.d[t.d[[1]]%%2,1])
odd<-t.d[t.d[[1]]%%2,1]
even<-t.d[t.d[[1]]%%2 == 0,1]
odd
even
odd<-c(odd,t.d[t.d[[2]]%%2,2])
odd
odd<-c(odd,t.d[t.d[[2]]%%2,2])
even<-c(even,t.d[t.d[[2]]%%2 == 0,2])
even
odd<-c(odd,t.d[t.d[[3]]%%2,3])
odd
even<-c(even,t.d[t.d[[3]]%%2 == 0,3])
even
t.d
if(TRUE){
odd<-t.d[t.d[[1]]%%2,1]
even<-t.d[t.d[[1]]%%2 == 0,1]
odd<-c(odd,t.d[t.d[[2]]%%2,2])
even<-c(even,t.d[t.d[[2]]%%2 == 0,2])
odd<-c(odd,t.d[t.d[[3]]%%2==1,3])
even<-c(even,t.d[t.d[[3]]%%2 == 0,3])
}
odd
for(i in 1:ncol(t.d)){
odd<-t.d[t.d[[i]]%%2==1,i]
even<-t.d[t.d[[i]]%%2 == 0,i]
}
odd
even
for(i in 1:ncol(t.d)){
odd<-c(odd,t.d[t.d[[i]]%%2==1,i])
even<-c(even,t.d[t.d[[i]]%%2 == 0,i])
}
odd
even
odd<-c()
even<-c()
for(i in 1:ncol(m)){
odd<-c(odd,m[m[[i]]%%2==1,i])
even<-c(even,m[m[[i]]%%2 == 0,i])
}
even
odd
m[m%%2 == 1]
m[m%%2 == 0]
m[m%%2]
== 1
m[m%%2 == 1]
t.d[t.d[[1]]%%2==1
odd<-c()
even<-c()
for(i in 1:ncol(t.d)){
odd<-c(odd,t.d[t.d[[i]]%%2==1,i])
even<-c(even,t.d[t.d[[i]]%%2 == 0,i])
}
if(TRUE){
odd<-t.d[t.d[[1]]%%2,1]
even<-t.d[t.d[[1]]%%2 == 0,1]
odd<-c(odd,t.d[t.d[[2]]%%2,2])
even<-c(even,t.d[t.d[[2]]%%2 == 0,2])
odd<-c(odd,t.d[t.d[[3]]%%2==1,3])
even<-c(even,t.d[t.d[[3]]%%2 == 0,3])
}
t.d
odd
even
m[m%%2 == 1]
m[m%%2 == 0]
t.d[t.d[[1]]%%2==1
odd<-c()
even<-c()
for(i in 1:ncol(t.d)){
odd<-c(odd,t.d[t.d[[i]]%%2==1,i])
even<-c(even,t.d[t.d[[i]]%%2 == 0,i])
}
if(TRUE){
odd<-t.d[t.d[[1]]%%2,1]
even<-t.d[t.d[[1]]%%2 == 0,1]
odd<-c(odd,t.d[t.d[[2]]%%2,2])
even<-c(even,t.d[t.d[[2]]%%2 == 0,2])
odd<-c(odd,t.d[t.d[[3]]%%2==1,3])
even<-c(even,t.d[t.d[[3]]%%2 == 0,3])
}
t.d
odd
even
m[m%%2 == 1]
m[m%%2 == 0]
t.d[t.d[[1]]%%2==1
odd<-c()
even<-c()
for(i in 1:ncol(t.d)){
odd<-c(odd,t.d[t.d[[i]]%%2==1,i])
even<-c(even,t.d[t.d[[i]]%%2 == 0,i])
}
if(TRUE){
odd<-t.d[t.d[[1]]%%2,1]
even<-t.d[t.d[[1]]%%2 == 0,1]
odd<-c(odd,t.d[t.d[[2]]%%2,2])
even<-c(even,t.d[t.d[[2]]%%2 == 0,2])
odd<-c(odd,t.d[t.d[[3]]%%2==1,3])
even<-c(even,t.d[t.d[[3]]%%2 == 0,3])
}
t.d
odd
even
m[m%%2 == 1]
m[m%%2 == 0]
v <- t.d[t.d[[1]]%%2==1
odd<-c()
even<-c()
for(i in 1:ncol(t.d)){
odd<-c(odd,t.d[t.d[[i]]%%2==1,i])
even<-c(even,t.d[t.d[[i]]%%2 == 0,i])
}
if(TRUE){
odd<-t.d[t.d[[1]]%%2,1]
even<-t.d[t.d[[1]]%%2 == 0,1]
odd<-c(odd,t.d[t.d[[2]]%%2,2])
even<-c(even,t.d[t.d[[2]]%%2 == 0,2])
odd<-c(odd,t.d[t.d[[3]]%%2==1,3])
even<-c(even,t.d[t.d[[3]]%%2 == 0,3])
}
t.d
odd
even
m[m%%2 == 1]
m[m%%2 == 0]
class(t.d[t.d[[1]]%%2==1)
odd<-c()
even<-c()
for(i in 1:ncol(t.d)){
odd<-c(odd,t.d[t.d[[i]]%%2==1,i])
even<-c(even,t.d[t.d[[i]]%%2 == 0,i])
}
if(TRUE){
odd<-t.d[t.d[[1]]%%2,1]
even<-t.d[t.d[[1]]%%2 == 0,1]
odd<-c(odd,t.d[t.d[[2]]%%2,2])
even<-c(even,t.d[t.d[[2]]%%2 == 0,2])
odd<-c(odd,t.d[t.d[[3]]%%2==1,3])
even<-c(even,t.d[t.d[[3]]%%2 == 0,3])
}
t.d
odd
even
m[m%%2 == 1]
m[m%%2 == 0]
even<-c()
for(i in 1:ncol(t.d)){
odd<-c(odd,t.d[t.d[[i]]%%2==1,i])
even<-c(even,t.d[t.d[[i]]%%2 == 0,i])
}
t.d[[1]]%%2==1
t.d
t.d
t.d[[1]]%%2==1
t.d[t.d[[1]]%%2==1,1]
q()
cat("Rahul","Priyadarshi")
cat("Rahul","Priyadarshi",sep="-")
typeof(x)
typeof(cat("Rahul","Priyadarshi"))
typeof(x)
typeof(8)
typeof(1:4)
x<-c("Rahul","Richa")
subsplit("Rahul","")
strsplit("Rahul","")
strsplit(x,"")
q()
adv <- rnorm(30,400,200)
sales <- rnorm(30,4000,1000)
plot(sales~adv)
plot(sales~adv, type = "p")
plot(sales~adv)
plot(sales~adv, type = "p")
plot(adv,sales)
plot(sales~adv,main = "Sales vs. Advertising Expenses")
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab <- "Advertising Expenses",
ylab <- "Sales in Thousands")
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands")
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
xlim = c(200,600))
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
ylim = c(3000,4000))
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
font.main = 4)
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
font.main = 1)
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
font.main = 5)
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
font.main = 5, col = red)
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
font.main = 5, col = "red")
colors()
q()
1.07^2
1.07^80
(1.07^80)*2
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("Rcpp")
find.package("KernSmooth")
library(KernSmooth)
exit
exit()
quit
quit()
clc
clear
clc()
clear()
available.packages()
a <- available.packages()
types(a)
type(a)
typeof(a)
a <- available.packages();
a <- available.packages();
quit()
find.package("slidify")
install.packages("slidify")
install.packages("slidify")
install.packages("ggplot2")
source("http::/bioconductor.org/biocLite.R")
load(ggplot2)
library(ggplot2)
search()
biocLite()
find_rtools()
find.package("devtools")
find_rtools()
install.packages("Rcpp")
install.packages("Rcpp")
find_rtools()
library(devtools)
find_rtools()
quit
quit()
q()
install.packages("swirl")
package_version("swirl")
package_version(swirl)
packageVersion(swirl)
packageVersion("swirl")
library(swirl)
swirl()
library(swirl)
install_from_swirl("R Programming")
swirl()
swirl()
5+7
x <- 5+7
x
y = x-3
y = x - 3
y <- x - 3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z,555)
c(z,555,z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
play()
setwd("F:/course/Data Science/R programming/Week 1/Assignments and quiz")
nxt()
ls()
dir()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
dir()
file.exists("mytest.R")
file.info()
file.info("mytest.R")
file.rename("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
?file.path
args(file.path)
file.path("mytest3.R")
file.path(c("folder1","folder2"))
file.path("folder1", "folder2")
?dir.create
create.dir("testdir2","testdir3",recursive = TRUE)
dir.create("testdir2","testdir3",recursive = TRUE)
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd(..)
setwd(.)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
my_seq
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(40,times = 40)
rep(0,times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect(num_vect < 1)
tf <- num_vect[num_vect < 1]
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Rahul Priyadarshi")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), collapse = "")
paste(1:3, c("X", "Y", "Z"),sep = "")
paste(LETTERS, 1:4, sep = "-")
q()
