q()
install.packages("swirl")
package_version("swirl")
package_version(swirl)
packageVersion(swirl)
packageVersion("swirl")
library(swirl)
swirl()
swirl()
library(swirl)
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <-  rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(x, y), 100)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/o
0/0
Inf - Inf
x
play()
DT = data.table(x=c(1,NaN,NA,3), y=c(NA_integer_, 1:3), z=c("a", NA_character_, "b", "c"))
y <- x
na.omit(y)
y
na.omit(DT, cols="x")
na.omit(y, cols="y")
nxt()
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)
]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect) <- c("foo" , "bar", "norf")
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo" , "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")
]
my_vector <- seq(1, 20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- (seq(1,20), 4, 5)
my_matrix2 <- matrix(seq(1,20), 4, 5)
play()
my_matrix2 <- matrix(seq(1,20), nrow = 4, ncol = 5)
my_matrix2
args(matrix)
nxt()
identical(my_matrix, my_matrix2)
patients <- c(Bill, Gina, Kelly, Sean)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age",
| "weight", "bp", "rating", "test")
cnames <- c("patient", "age",
"weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
bye()
?`%in%`
1:10 %in% c(1,3,5,9)
?sample
x <- 1:10
sample(x[x >  8])
sample(x[x >  9])
q()
q()
lapply
x <- list(a = 1:5, b = rnorm(10))
x
?rnorm
x <-  list(a = 1:4, b = rnorm(10), c = rnorm(20,1), d = rnorm(100,5))
lapply(x, mean)
? runif
?rnorm
x <- 1:4
lapply(x, runif)
?rowSums
?rowsum
rowSums
x <- matrix(rnorm(200), 20, 10)
?quantile
args(quantile)
apply(x, 1, quantile, probs = c(0.25, 0.75))
?rowMeans
?mapply
?tapply
?gl
?split
?interaction
f1 <- gl(2,5)
f2 <-  gl(5,2)
interaction(f1,f2)
?str
str(1:12)
q()
?binom
?rbinom
choose(3,2)
?rbinom
q()
set.seed(1)
rpois(5, 2)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
q()
install.packages('RMySQL',type='source')
source('http://bioconductor.org/biocLite.R')
source("https://bioconductor.org/biocLite.R")
biocLite('rhdf5')
library(rhdf5)
library(XML)
library(RMySQL)
library(httr)
q()
library(DBI)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("Test Github", key = "ea7e1c9104518e5fa4cb",
secret = "b9010c1d9b69df8578e8a71faefffdc81a3efc7b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
library(httr)
require(httpuv)
require(jsonlite)
# 1. Find OAuth settings for github: http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
# Insert your values below - if secret is omitted, it will look it up in the
# GITHUB_CONSUMER_SECRET environmental variable.  Use http://localhost:1410
# as the callback url
myapp <- oauth_app("Test Github", "ea7e1c9104518e5fa4cb", secret = "b9010c1d9b69df8578e8a71faefffdc81a3efc7b")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
library(httr)
require(httpuv)
require(jsonlite)
# 1. Find OAuth settings for github: http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
# Insert your values below - if secret is omitted, it will look it up in the
# GITHUB_CONSUMER_SECRET environmental variable.  Use http://localhost:1410
# as the callback url
myapp <- oauth_app("quiz2", "ea7e1c9104518e5fa4cb", secret = "b9010c1d9b69df8578e8a71faefffdc81a3efc7b")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
# Insert your values below - if secret is omitted, it will look it up in the
# GITHUB_CONSUMER_SECRET environmental variable.  Use http://localhost:1410
# as the callback url
myapp <- oauth_app("quiz2", "ddb0d599de51ccd02f4b", secret = "6af1109f6ecf442d292425087d49bb13d9bbe9c8")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
install.packages('httpuv')
library(httpuv)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("Test Github",
key = "ea7e1c9104518e5fa4cb",
secret = "b9010c1d9b69df8578e8a71faefffdc81a3efc7b")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
output
library(httr)
require(httpuv)
require(jsonlite)
# 1. Find OAuth settings for github: http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
# Insert your values below - if secret is omitted, it will look it up in the
# GITHUB_CONSUMER_SECRET environmental variable.  Use http://localhost:1410
# as the callback url
myapp <- oauth_app("quiz2", "ddb0d599de51ccd02f4b", secret = "6af1109f6ecf442d292425087d49bb13d9bbe9c8")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
output
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
library(tcltk)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
acs <- data.table(read.csv(f))
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
## Loading required package: tcltk
query2 <- sqldf("select pwgtp1 from acs")  ## NO
query3 <- sqldf("select * from acs where AGEP < 50 and pwgtp1")  ## NO
query4 <- sqldf("select * from acs where AGEP < 50")  ## NO
identical(query3, query4)
setwd("C:/Users/hp/datasciencecoursera/Course3(Getting and Cleaning Data)/Week 2(Quiz)")
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(connection)
close(connection)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines <- readLines(url, n = 10)
w <- c(1, 9, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3)
colNames <- c("filler", "week", "filler", "sstNino12", "filler", "sstaNino12",
"filler", "sstNino3", "filler", "sstaNino3", "filler", "sstNino34", "filler",
"sstaNino34", "filler", "sstNino4", "filler", "sstaNino4")
d <- read.fwf(url, w, header = FALSE, skip = 4, col.names = colNames)
d <- d[, grep("^[^filler]", names(d))]
sum(d[, 4])
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "ea7e1c9104518e5fa4cb",
secret = "b9010c1d9b69df8578e8a71faefffdc81a3efc7b")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "ea7e1c9104518e5fa4cb",
secret = "b9010c1d9b69df8578e8a71faefffdc81a3efc7b")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repo"))
stop_for_status(req)
output <- content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "ea7e1c9104518e5fa4cb",
secret = "b9010c1d9b69df8578e8a71faefffdc81a3efc7b")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
output
library(RMySQL)
getwd()
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- download.file
download.file(url, destfile = './ss06pid.csv')
library(data.table)
data.table(read.csv('getdata_data_ss06pid.csv'))
x <- data.table(read.csv('getdata_data_ss06pid.csv'))
x.names
x.nrow
class(x)
library(sqldf)
require(jsonlite)
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
x
names(x)
library(sqldf)
install.packages('sqldf')
library(sqldf)
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
query1 <- sqldf("select pwgtp1 from x where AGEP < 50")
acs <- x
data(titanic3, package=”PASWR”)
colnames(titanic3)
head(titanic3
)
install.packages('PASWR')
library('PASWR')
data(titanic3, package=”PASWR”)
colnames(titanic3)
head(titanic3
)
sqldf(‘select age, count(*) from titanic3 where age is not null group by age’)
library(sqldf)
sqldf(‘select age, count(*) from titanic3 where age is not null group by age’)
query2 <- sqldf("select pwgtp1 from acs")
ucscDb <- dbConnect(MySQL(), user = 'student', password = 'student', host = 'localhost')
result <- dbGetQuery(ucscDb, 'show databases;')
result
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
ucscDb <- dbConnect(MySQL(), user = 'root', password = 'Rahul@123', host = 'localhost')
result <- dbGetQuery(ucscDb, 'show databases;')
result
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
library("RMySQL")
detach("package:RMySQL", unload=TRUE)
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
library("RMySQL")
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
query1
names(query1)
min(query1['pwgtp1'])
detach("package:RMySQL", unload=TRUE)
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
head(query1)
min(query1)
x <- unique(acs$AGEP)
y <- sqldf('select distinct AGEP from acs')
identical(x,y)
class(x)
class(y)
x <- data.frame(x)
identical(x,y)
class(x)
x.head()
head(x)
head(y)
con <- url(http://biostat.jhsph.edu/~jleek/contact.html)
con <- url('http://biostat.jhsph.edu/~jleek/contact.html')
library(XML)
html <- htmlTreeParse(url, useInternalNodes = TRUE)
html <- htmlTreeParse(con, useInternalNodes = TRUE)
htmlCode <- readLines(con)
close(con)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for'
con <- url(url)
lines <- readLines(con)
close(con)
head(lines)
ncol(lines)
class(lines)
url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for'
con <- url(url)
lines <- readLines(con, n = 10)
head(lines)
class(lines)
html <- htmlTreeParse(url, useInternalNodes = TRUE)
class(html)
head(html)
library(httr)
html = GET(url)
content2 <- content(html, as = 'text')
class(content())
class(content2)
x <- read.csv(url)
head(x)
x <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
head(x)
sum(x$V4)
sum(x[4])
set.seed(13435)
X <- data.frame('var1' = sample(1:5), 'var2' = sample(6:10), 'var3' = sample(11:15))
X <- X[sample(1:5),];
X$var2[c(1,3)] = NA
X
X <- data.frame('var1' = sample(1:5), 'var2' = sample(6:10), 'var3' = sample(11:15))
X
set.seed(13435)
X <- data.frame('var1' = sample(1:5), 'var2' = sample(6:10), 'var3' = sample(11:15))
X
X <- X[sample(1:5),]
X
X$var2[c(1,3)] = NA
X
