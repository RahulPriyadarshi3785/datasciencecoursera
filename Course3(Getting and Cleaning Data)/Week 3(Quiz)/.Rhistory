even
m[m%%2 == 1]
m[m%%2 == 0]
class(t.d[t.d[[1]]%%2==1)
odd<-c()
even<-c()
for(i in 1:ncol(t.d)){
odd<-c(odd,t.d[t.d[[i]]%%2==1,i])
even<-c(even,t.d[t.d[[i]]%%2 == 0,i])
}
if(TRUE){
odd<-t.d[t.d[[1]]%%2,1]
even<-t.d[t.d[[1]]%%2 == 0,1]
odd<-c(odd,t.d[t.d[[2]]%%2,2])
even<-c(even,t.d[t.d[[2]]%%2 == 0,2])
odd<-c(odd,t.d[t.d[[3]]%%2==1,3])
even<-c(even,t.d[t.d[[3]]%%2 == 0,3])
}
t.d
odd
even
m[m%%2 == 1]
m[m%%2 == 0]
even<-c()
for(i in 1:ncol(t.d)){
odd<-c(odd,t.d[t.d[[i]]%%2==1,i])
even<-c(even,t.d[t.d[[i]]%%2 == 0,i])
}
t.d[[1]]%%2==1
t.d
t.d
t.d[[1]]%%2==1
t.d[t.d[[1]]%%2==1,1]
q()
cat("Rahul","Priyadarshi")
cat("Rahul","Priyadarshi",sep="-")
typeof(x)
typeof(cat("Rahul","Priyadarshi"))
typeof(x)
typeof(8)
typeof(1:4)
x<-c("Rahul","Richa")
subsplit("Rahul","")
strsplit("Rahul","")
strsplit(x,"")
q()
adv <- rnorm(30,400,200)
sales <- rnorm(30,4000,1000)
plot(sales~adv)
plot(sales~adv, type = "p")
plot(sales~adv)
plot(sales~adv, type = "p")
plot(adv,sales)
plot(sales~adv,main = "Sales vs. Advertising Expenses")
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab <- "Advertising Expenses",
ylab <- "Sales in Thousands")
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands")
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
xlim = c(200,600))
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
ylim = c(3000,4000))
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
font.main = 4)
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
font.main = 1)
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
font.main = 5)
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
font.main = 5, col = red)
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
font.main = 5, col = "red")
colors()
q()
1.07^2
1.07^80
(1.07^80)*2
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("Rcpp")
find.package("KernSmooth")
library(KernSmooth)
exit
exit()
quit
quit()
clc
clear
clc()
clear()
available.packages()
a <- available.packages()
types(a)
type(a)
typeof(a)
a <- available.packages();
a <- available.packages();
quit()
find.package("slidify")
install.packages("slidify")
install.packages("slidify")
install.packages("ggplot2")
source("http::/bioconductor.org/biocLite.R")
load(ggplot2)
library(ggplot2)
search()
biocLite()
find_rtools()
find.package("devtools")
find_rtools()
install.packages("Rcpp")
install.packages("Rcpp")
find_rtools()
library(devtools)
find_rtools()
quit
quit()
q()
install.packages("swirl")
package_version("swirl")
package_version(swirl)
packageVersion(swirl)
packageVersion("swirl")
library(swirl)
swirl()
swirl()
library(swirl)
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <-  rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(x, y), 100)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/o
0/0
Inf - Inf
x
play()
DT = data.table(x=c(1,NaN,NA,3), y=c(NA_integer_, 1:3), z=c("a", NA_character_, "b", "c"))
y <- x
na.omit(y)
y
na.omit(DT, cols="x")
na.omit(y, cols="y")
nxt()
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)
]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect) <- c("foo" , "bar", "norf")
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo" , "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")
]
my_vector <- seq(1, 20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- (seq(1,20), 4, 5)
my_matrix2 <- matrix(seq(1,20), 4, 5)
play()
my_matrix2 <- matrix(seq(1,20), nrow = 4, ncol = 5)
my_matrix2
args(matrix)
nxt()
identical(my_matrix, my_matrix2)
patients <- c(Bill, Gina, Kelly, Sean)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age",
| "weight", "bp", "rating", "test")
cnames <- c("patient", "age",
"weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
bye()
?`%in%`
1:10 %in% c(1,3,5,9)
?sample
x <- 1:10
sample(x[x >  8])
sample(x[x >  9])
q()
q()
lapply
x <- list(a = 1:5, b = rnorm(10))
x
?rnorm
x <-  list(a = 1:4, b = rnorm(10), c = rnorm(20,1), d = rnorm(100,5))
lapply(x, mean)
? runif
?rnorm
x <- 1:4
lapply(x, runif)
?rowSums
?rowsum
rowSums
x <- matrix(rnorm(200), 20, 10)
?quantile
args(quantile)
apply(x, 1, quantile, probs = c(0.25, 0.75))
?rowMeans
?mapply
?tapply
?gl
?split
?interaction
f1 <- gl(2,5)
f2 <-  gl(5,2)
interaction(f1,f2)
?str
str(1:12)
q()
?binom
?rbinom
choose(3,2)
?rbinom
q()
set.seed(1)
rpois(5, 2)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
q()
install.packages('RMySQL',type='source')
source('http://bioconductor.org/biocLite.R')
source("https://bioconductor.org/biocLite.R")
biocLite('rhdf5')
library(rhdf5)
library(XML)
library(RMySQL)
library(httr)
q()
swirl()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?seperate
?separate
separate(data = res, col = sex_class, into = c('sex', 'class'))
submit()
students3
submit()
submit()
?spread
submit
submit()
submit()
submit()
submit()
students3
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
print
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
stocks %>% gather(stock, price, -time)
stocksm %>% spread(stock, price)
stocksm <- stocks %>% gather(stock, price, -time)
stocksm %>% spread(stock, price)
df <- data.frame(x = c("a", "b"), y = c(3, 4), z = c(5, 6))
df
df %>% spread(x, y)
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE)
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, class()) %>%
print
submit()
library(readr)
parse_number('class5')
?mutate
?parse_number
parse_number("$1000")
parse_number("1,234,567.78")
?mutate
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class5 = parse_number('class5'), class4 = parse_number('class4'),
class3 = parse_number('class3'),
class2 = parse_number('class2'), class1 = parse_number('class1'))
print
students3
students3 %>%
+     gather(class, grade, class1:class5, na.rm = TRUE) %>%
+     spread(test, grade)
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
print()
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = parse_number(class))
print
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade)
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = parse_number(class))
submit()
play()
nxt()
submit()
students4
submit()
submit()
getwd()
submit()
passed
failed
mutate(passed, status = 'passed')
passed <- passed %>% mutate(status = 'passed')
failed <- failed %>% mutate(status = 'failed')
?bind_rows
bind_rows(passed, failed)
sat
?select
submit()
submit()
setwd('C:/Users/hp/datasciencecoursera/Course3(Getting and Cleaning Data)/Week 3(Quiz)')
list.files()
df <- read.csv(C:/Users/hp/datasciencecoursera/Course3(Getting and Cleaning Data)/Week 3(Quiz)/getdata_data_ss06hid.csv')
df <- read.csv('C:/Users/hp/datasciencecoursera/Course3(Getting and Cleaning Data)/Week 3(Quiz)/getdata_data_ss06hid.csv')
class(df)
mydf <- tbl_df(df)
mydf
which(mydf['ACR'] == 3 & mydf['AGS'] == 6)
library(jpeg)
install.packages('jpeg')
library(jpeg)
?readJPEG
url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg'
download.file(url, destfile = 'profJeff.jpg')
img <- readJPEG(system.file('img', 'getdata_jeff.jpg', package = 'jpeg'))
img <- readJPEG(system.file('img', 'C:/Users/hp/datasciencecoursera/Course3(Getting and Cleaning Data)/Week 3(Quiz)/getdata_jeff.jpg', package = 'jpeg'))
img <- readJPEG('C:/Users/hp/datasciencecoursera/Course3(Getting and Cleaning Data)/Week 3(Quiz)/getdata_jeff.jpg')
img <- readJPEG('C:/Users/hp/datasciencecoursera/Course3(Getting and Cleaning Data)/Week 3(Quiz)/getdata_jeff.jpg', native = TRUE)
quantile(img, probs = c(0.3, 0.8))
x <- read.csv('C:/Users/hp/datasciencecoursera/Course3(Getting and Cleaning Data)/Week 3(Quiz)/getdata_data_GDP.csv')
y <- read.csv('C:/Users/hp/datasciencecoursera/Course3(Getting and Cleaning Data)/Week 3(Quiz)/getdata_data_EDSTATS_Country.csv')
myx <- tbl_df(x)
myy <- tbl_df(y)
myx
myy
colnames(myx)
colnames(myy)
myx['X']
x <- data.table(read.csv('C:/Users/hp/datasciencecoursera/Course3(Getting and Cleaning Data)/Week 3(Quiz)/getdata_data_GDP.csv', skip = 4, nrows = 232))
library(data.table)
x <- data.table(read.csv('C:/Users/hp/datasciencecoursera/Course3(Getting and Cleaning Data)/Week 3(Quiz)/getdata_data_GDP.csv', skip = 4, nrows = 232))
tail(x)
head(x)
x <- data.table(read.csv('C:/Users/hp/datasciencecoursera/Course3(Getting and Cleaning Data)/Week 3(Quiz)/getdata_data_GDP.csv', skip = 4, nrows = 231))
myx <- tbl_df(x)
y <- data.table(read.csv('C:/Users/hp/datasciencecoursera/Course3(Getting and Cleaning Data)/Week 3(Quiz)/getdata_data_EDSTATS_Country.csv'))
myy <- tbl_df(y)
dt <- merge(myx, myy, by.x = 'X', by.y = 'CountryCode', all = TRUE)
head(dt)
colnames(dt)
head(dt['X.1'])
dt1 <- arrange(dt, desc(X.1))
dt1
tail(dt1)
colnames(df)
colnames(dt)
colnames(y)
dt10 <- merge(x, y, all = TRUE, by = c("CountryCode"))
sum(!is.na(unique(dt10$rankingGDP)))
sum(!is.na(unique(dt$X.1)))
dt[order(X.1, decreasing = TRUE), list(CountryCode, Long.Name.x, Long.Name.y,
X.1, X.4)][13]
dt[order(X.1, decreasing = TRUE), list(X, Long.Name.x, Long.Name.y,
X.1, X.4)][13]
dt[order(X.1, decreasing = TRUE), list('X',
'X.1', 'X.4')][13]
dt[order(X.1, decreasing = TRUE), list(X,X.1, X.4)][13]
dt1[13]
select(dt1, X, X.1, X.2, X.3, X.4)[13]
select(dt1, X, X.1, X.2, X.3, X.4)
sum(!is.na(unique(dt1$X.1)))
dt1 %>% select(X, X.1, X.2, X.3, X.4) %>% filter(X == 13)
m <- dt1 %>% select(X, X.1, X.2, X.3, X.4)
m[13]
m[13,]
dt1 %>% select(X, X.1, X.2, X.3, X.4)[13,]
dt1 %>% select(X, X.1, X.2, X.3, X.4)
colnames(dt1)
unique(select(dt1, Income.Group))
dt2 <- group_by(dt1, Income.Group)
summarise(dt2, mean(X.1, na.rm = TRUE))
library(Hmisc)
library(plyr)
dt3 <- mutate(dt1, quantile5group = cut2(X.1, g = 5))
table(dt3$Income.Group)
summarise(dt2, X.4 > X.4[39])
summarise(dt2, sum(X.4 > X.4[39]))
dt3.head()
head(dt3)
dt3[Income.Group == "Lower middle income", .N, by = c("Income.Group", "quantile5group")]
colnames(dt3)
colnames(dt2)
sum(TRUE,FALSE)
summarise(dt2, function(X.4){sum(X.4 > X.4[39])})
summarise(dt2, mean(X.4))
summarise(dt2, mean(X.4, na.rm = TRUE))
summarise(dt2, mean(X.1, na.rm = TRUE))
dt2 <- group_by(dt1, Income.Group)
summarise(dt2, mean(X.1, na.rm = TRUE))
x <- data.table(read.csv('C:/Users/hp/datasciencecoursera/Course3(Getting and Cleaning Data)/Week 3(Quiz)/getdata_data_GDP.csv', skip = 4, nrows = 232))
y <- data.table(read.csv('C:/Users/hp/datasciencecoursera/Course3(Getting and Cleaning Data)/Week 3(Quiz)/getdata_data_EDSTATS_Country.csv'))
myx <- tbl_df(x)
myy <- tbl_df(y)
dt <- merge(myx, myy, by.x = 'X', by.y = 'CountryCode', all = TRUE)
dt1 <- arrange(dt, desc(X.1))
dt2 <- group_by(dt1, Income.Group)
summarise(dt2, mean(X.1, na.rm = TRUE))
unique(select(dt1, Income.Group))
dt2 <- group_by(dt1, Income.Group)
summarise(dt2, mean(X.1, na.rm = TRUE))
