odd<-c(odd,t.d[t.d[[i]]%%2==1,i])
even<-c(even,t.d[t.d[[i]]%%2 == 0,i])
}
if(TRUE){
odd<-t.d[t.d[[1]]%%2,1]
even<-t.d[t.d[[1]]%%2 == 0,1]
odd<-c(odd,t.d[t.d[[2]]%%2,2])
even<-c(even,t.d[t.d[[2]]%%2 == 0,2])
odd<-c(odd,t.d[t.d[[3]]%%2==1,3])
even<-c(even,t.d[t.d[[3]]%%2 == 0,3])
}
t.d
odd
even
m[m%%2 == 1]
m[m%%2 == 0]
class(t.d[t.d[[1]]%%2==1)
odd<-c()
even<-c()
for(i in 1:ncol(t.d)){
odd<-c(odd,t.d[t.d[[i]]%%2==1,i])
even<-c(even,t.d[t.d[[i]]%%2 == 0,i])
}
if(TRUE){
odd<-t.d[t.d[[1]]%%2,1]
even<-t.d[t.d[[1]]%%2 == 0,1]
odd<-c(odd,t.d[t.d[[2]]%%2,2])
even<-c(even,t.d[t.d[[2]]%%2 == 0,2])
odd<-c(odd,t.d[t.d[[3]]%%2==1,3])
even<-c(even,t.d[t.d[[3]]%%2 == 0,3])
}
t.d
odd
even
m[m%%2 == 1]
m[m%%2 == 0]
even<-c()
for(i in 1:ncol(t.d)){
odd<-c(odd,t.d[t.d[[i]]%%2==1,i])
even<-c(even,t.d[t.d[[i]]%%2 == 0,i])
}
t.d[[1]]%%2==1
t.d
t.d
t.d[[1]]%%2==1
t.d[t.d[[1]]%%2==1,1]
q()
cat("Rahul","Priyadarshi")
cat("Rahul","Priyadarshi",sep="-")
typeof(x)
typeof(cat("Rahul","Priyadarshi"))
typeof(x)
typeof(8)
typeof(1:4)
x<-c("Rahul","Richa")
subsplit("Rahul","")
strsplit("Rahul","")
strsplit(x,"")
q()
adv <- rnorm(30,400,200)
sales <- rnorm(30,4000,1000)
plot(sales~adv)
plot(sales~adv, type = "p")
plot(sales~adv)
plot(sales~adv, type = "p")
plot(adv,sales)
plot(sales~adv,main = "Sales vs. Advertising Expenses")
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab <- "Advertising Expenses",
ylab <- "Sales in Thousands")
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands")
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
xlim = c(200,600))
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
ylim = c(3000,4000))
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
font.main = 4)
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
font.main = 1)
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
font.main = 5)
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
font.main = 5, col = red)
plot(sales~adv,main = "Sales vs. Advertising Expenses",
xlab = "Advertising Expenses",
ylab = "Sales in Thousands",
font.main = 5, col = "red")
colors()
q()
1.07^2
1.07^80
(1.07^80)*2
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("Rcpp")
find.package("KernSmooth")
library(KernSmooth)
exit
exit()
quit
quit()
clc
clear
clc()
clear()
available.packages()
a <- available.packages()
types(a)
type(a)
typeof(a)
a <- available.packages();
a <- available.packages();
quit()
find.package("slidify")
install.packages("slidify")
install.packages("slidify")
install.packages("ggplot2")
source("http::/bioconductor.org/biocLite.R")
load(ggplot2)
library(ggplot2)
search()
biocLite()
find_rtools()
find.package("devtools")
find_rtools()
install.packages("Rcpp")
install.packages("Rcpp")
find_rtools()
library(devtools)
find_rtools()
quit
quit()
q()
install.packages("swirl")
package_version("swirl")
package_version(swirl)
packageVersion(swirl)
packageVersion("swirl")
library(swirl)
swirl()
swirl()
library(swirl)
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <-  rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(x, y), 100)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/o
0/0
Inf - Inf
x
play()
DT = data.table(x=c(1,NaN,NA,3), y=c(NA_integer_, 1:3), z=c("a", NA_character_, "b", "c"))
y <- x
na.omit(y)
y
na.omit(DT, cols="x")
na.omit(y, cols="y")
nxt()
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)
]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect) <- c("foo" , "bar", "norf")
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo" , "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")
]
my_vector <- seq(1, 20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- (seq(1,20), 4, 5)
my_matrix2 <- matrix(seq(1,20), 4, 5)
play()
my_matrix2 <- matrix(seq(1,20), nrow = 4, ncol = 5)
my_matrix2
args(matrix)
nxt()
identical(my_matrix, my_matrix2)
patients <- c(Bill, Gina, Kelly, Sean)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age",
| "weight", "bp", "rating", "test")
cnames <- c("patient", "age",
"weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
bye()
?`%in%`
1:10 %in% c(1,3,5,9)
?sample
x <- 1:10
sample(x[x >  8])
sample(x[x >  9])
q()
q()
lapply
x <- list(a = 1:5, b = rnorm(10))
x
?rnorm
x <-  list(a = 1:4, b = rnorm(10), c = rnorm(20,1), d = rnorm(100,5))
lapply(x, mean)
? runif
?rnorm
x <- 1:4
lapply(x, runif)
?rowSums
?rowsum
rowSums
x <- matrix(rnorm(200), 20, 10)
?quantile
args(quantile)
apply(x, 1, quantile, probs = c(0.25, 0.75))
?rowMeans
?mapply
?tapply
?gl
?split
?interaction
f1 <- gl(2,5)
f2 <-  gl(5,2)
interaction(f1,f2)
?str
str(1:12)
q()
?binom
?rbinom
choose(3,2)
?rbinom
q()
set.seed(1)
rpois(5, 2)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
q()
install.packages('RMySQL',type='source')
source('http://bioconductor.org/biocLite.R')
source("https://bioconductor.org/biocLite.R")
biocLite('rhdf5')
library(rhdf5)
library(XML)
library(RMySQL)
library(httr)
q()
library(data.table)
library(Hmisc)
library(plyr)
library(dplyr)
x <- data.table(read.csv('C:/Users/hp/datasciencecoursera/Course3(Getting and Cleaning Data)/Week 3(Quiz)/getdata_data_GDP.csv', skip = 4, nrows = 232))
x <- data.table(read.csv('C:/Users/hp/datasciencecoursera/Course3(Getting and Cleaning Data)/Week 3(Quiz)/getdata_data_EDSTATS_Country.csv'))
x <- data.table(read.csv('C:/Users/hp/datasciencecoursera/Course3(Getting and Cleaning Data)/Week 3(Quiz)/getdata_data_GDP.csv', skip = 4, nrows = 232))
y <- data.table(read.csv('C:/Users/hp/datasciencecoursera/Course3(Getting and Cleaning Data)/Week 3(Quiz)/getdata_data_EDSTATS_Country.csv'))
dt <- merge(x, y, by.x = 'X', by.y = 'CountryCode', all = TRUE)
dt1 <- arrange(dt, X.1)
dt2 <- group_by(dt1, Income.Group)
summarise(dt2, mean(X.1))
summarise(dt2, mean(X.1, na.rm = TRUE))
dt4 <- arrange(dt, desc(X.4))
dt4$X.4[38]
dt4$X.4[39]
dt4$X.4[40]
dt4$X.4
dt4 <- arrange(dt, desc(dt$X.4))
dt4$X.4
dt1$X.1
dt4 <- arrange(dt, desc(dt$X.4))
dt4$X.4
dtGDP <- x[X != ""]
dtGDP <- dtGDP[, list(X, X.1, X.3, X.4)]
setnames(dtGDP, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP",
"Long.Name", "gdp"))
dt <- merge(dtGDP, y, all = TRUE, by = c("CountryCode"))
sum(!is.na(unique(dt$rankingGDP)))
dt[order(rankingGDP, decreasing = TRUE), list(CountryCode, Long.Name.x, Long.Name.y,
rankingGDP, gdp)][13]
dt[, mean(rankingGDP, na.rm = TRUE), by = Income.Group]
breaks <- quantile(dt$rankingGDP, probs = seq(0, 1, 0.2), na.rm = TRUE)
dt$quantileGDP <- cut(dt$rankingGDP, breaks = breaks)
dt[Income.Group == "Lower middle income", .N, by = c("Income.Group", "quantileGDP")]
dt3 <- mutate(dt2, gdpGroup = cut2(X.1, g = 5))
dt3 <- mutate(dt1, gdpGroup = cut2(X.1, g = 5))
dt3 <- mutate(dt2, gdpGroup = cut2(X.1, g = 5))
dt3 <- mutate(dt1, gdpGroup = cut2(X.1, g = 5))
dt4 <- group_by(dt3, Income.Group)
summarise(dt2, mean(X.1))
xt <- xtabs(Freq~Income.Group+gdpGroup, data = dt3)
xt <- xtabs(Freq ~ Income.Group + gdpGroup, data = dt3)
table(dt3$gdpGroup,dt3$Income.Group)
names(dt)
tolower(names(dt))
library(stringr)
library(lubridate)
library(swirl)
swirl()
Sys.getlocale('LC_TIME')
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- row()
this_moment <- row(this_day)
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hours = 7, minutes = 11)
this_moment <- update(this_moment, hours = 7, minutes = 13, seconds = 14)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <-  update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(arrive, last_time)
how_long <- interval(last_time, arrive)
play()
how_long
nxt()
as.period(how_long)
stopwatch()
stopwatch()
View(stopwatch)
View(stopwatch)
q()
setwd('C:/Users/hp/datasciencecoursera/Course3(Getting and Cleaning Data)/Week 4(Quiz)')
packages <- c("data.table", "xlsx", "XML")
sapply(packages, require, character.only = TRUE, quietly = TRUE)
setInternet2(TRUE)
help("Defunct")
dt <- data.table(read.csv('getdata_data_ss06hid.csv'))
library(dplyr)
cran <- tbl_df(dt)
cran
nrow(cran)
cran %>% filter(VAL == 24) %>% nrow()
dat <- data.table(read.xlsx('getdata_data_DATA.gov_NGAP.xlsx'))
dat <- data.table(read.xlsx('getdata_data_DATA.gov_NGAP.xlsx', sheetIndex = 1, rowIndex = 18:23, colIndex = 7:15))
sum(dat$Zip*dat$Ext,na.rm=T)
strsplit(names(cran), "wgtp")[123]
strsplit(names(cran), "wgtp")[[123]]
dat <- data.table(read.csv('getdata_data_GDP.csv', skip = 4, nrows = 232, , stringsAsFactors=FALSE))
my_tbl <- tbl_df(data = dat)
names(my_tbl)
my_tbl$X.4 <- as.numeric(gsub(',', '', my_tbl$X.4))
mean(my_tbl$X.4, na.rm = TRUE)
dtGDP <- data.table(read.csv('getdata_data_GDP.csv', skip=4, nrows=215, stringsAsFactors=FALSE))
dtGDP <- dtGDP[X != ""]
dtGDP <- dtGDP[, list(X, X.1, X.3, X.4)]
setnames(dtGDP, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
gdp <- as.numeric(gsub(",", "", dtGDP$gdp))
mean(gdp, na.rm=TRUE)
GDPData <- read.csv('getdata_data_GDP.csv, colClasses = "character")
GDPData <- GDPData[5:194,]
GDPData$X.3 <- as.numeric(gsub(",","",GDPData$X.3))
mean(GDPData$X.3)
mean(GDPData$X.3)
l
lnk
hvjhv
lgdp
print('X')
GDPData <- read.csv('getdata_data_GDP.csv, colClasses = "character")
print('X')
GDPData<-read.csv('getdata_data_GDP.csv, colClasses = "character")
print('X')
dat <- data.table(read.csv('getdata_data_GDP.csv', skip = 4, nrows = 215, stringsAsFactors=FALSE))
my_tbl <- tbl_df(data = dat)
my_tbl
my_tbl$X.4 <- as.numeric(gsub(',', '', my_tbl$X.4))
mean(my_tbl$X.4, na.rm = TRUE)
setnames(my_tbl, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
my_tbl
grep("^United",countryNames), 3
grep("^United",my_tbl$Long.Name)
my_tbl
head(dat)
dat1 <- data.table(read.csv('getdata%2Fdata%2FEDSTATS_Country.csv'))
my_tbl1 <- tbl_df(data = dat1)
my_tbl
my_tbl1
dt2 <- merge(my_tbl, my_tbl1, all = TRUE, by = 'CountryCode')
my_tbl2 <- tbl_df(dt2)
my_tbl2
grepl('fiscal year end', my_tbl2$Special.Notes)
grepl('fiscal year end', tolower(my_tbl2$Special.Notes))
table(grepl('fiscal year end', tolower(my_tbl2$Special.Notes)), grepl('june', tolower(my_tbl2$Special.Notes)))
library(quantmod)
install.packages(quantmod)
install.packages('quantmod')
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
len(sampleTimes)
length(sampleTimes)
length(grep('2012', year(sampleTimes)))
grep('Monday', wdays(grep('2012', year(sampleTimes), value = TRUE))) %>% length
grep('Monday', weekdays(grep('2012', year(sampleTimes), value = TRUE))) %>% length
length(grep('2012', wdays(sampleTimes)))
length(grep('2012', wday(sampleTimes)))
length(grep('Monday', wday(sampleTimes)))
length(grep('Mon', wday(sampleTimes)))
length(grep('Mon', wday(sampleTimes, label = TRUE)))
length(grep(2, wday(sampleTimes)))
length(grepl(2, wday(sampleTimes)) && grepl('2012', year(sampleTimes)))
tables(year(sampleTimes), wday(sampleTimes, label = TRUE))
tables(year(sampleTimes), wday(sampleTimes))
addmargins(table(year(sampleTimes), weekdays(sampleTimes)))
length(grepl(2, wday(sampleTimes)) & grepl('2012', year(sampleTimes)))
Aye <- sample(c("Yes", "Si", "Oui"), 177, replace = TRUE)
Bee <- sample(c("Hum", "Buzz"), 177, replace = TRUE)
Sea <- sample(c("White", "Black", "Red", "Dead"), 177, replace = TRUE)
(A <- table(Aye, Bee, Sea))
addmargins(A)
?addmargins
addmargins(table(year(sampleTimes), wday(sampleTimes)))
table(year(sampleTimes), wday(sampleTimes))
q()
