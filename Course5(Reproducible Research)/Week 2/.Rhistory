plot(denmt)
distmt
q()
library(swirl)
swirl()
cmat
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
View(mdist)
View(mdist)
mdist(x,y,cx,cy)
apply(distTmp,col(distTmp),which.min)
apply(distTmp,1:12,which.min)
apply(distTmp,2,which.min)
points(x,y,pch=19,cex=2,col = cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx,newCy,col=col1,pch=8,cex=2,lwd=2)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist(x,y,newCx,newCy)
apply(distTmp2,2,which.min)
points(x,y,col=cols1[newClust2],pch=19,cex=2)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame,centers = 3)
kmObj$iter
plot(x,y,col=lmObj$cluster,pch=19,cex=2)
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
plot(kmObj$centers,col=c("black","red","green"),pch=19,cex=2,lwd=3)
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red","green"),pch=19,cex=3,lwd=3)
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
"Again! Again!"
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R",local=TRUE)
heatmap
heatmap(dataMatrix)
library(swirl)
swirl()
mat
svd(mat)
matu %*% d %*% t(matv)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1]*svd1$d[1])%*%svd1$v[,1]
a1 <- (svd1$u[,1]*svd1$d[1])%*%t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,1:2]*svd1$d[1:2]%*%t(svd1$v[,1:2])
a2 <- svd1$u[,1:2]%*%svd1$d[1:2]%*%t(svd1$v[,1:2])
a2 <- svd1$u[,1:2]%*%t(svd1$v[,1:2])%*%svd1$d[1:2]
a2 <- svd1$u[,1:2]%*%svd1$d[1:2]%*%t(svd1$v[,1:2])
a2 <- svd1$u[,1:2]%*%svd1$d[1:2]%*%t(svd1$v[,1:2)
a2 <- svd1$u[,1:2]%*%svd1$d[1:2]
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd)[562:563]
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd,subject = 1)
sub1 <- subset(ssd,subject == 1)
dim(sub1)
names(sub1[1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,10:12])
mdist <- dist(sub1[,10:12,maxCon])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562,563)],centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562,563)],centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch=19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch=19, ylab = "Walkdown Cluster")
q()
library(kern)
library(kernlab)
install.packages("kernlab")
library(kernlab)
exit
q()
df1
setwd("C:/Users/hp/datasciencecoursera/Course5(Reproducible Research)/Week 2")
if (!file.exists("activity.zip"))
{
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip")
}
if(!file.exists("activity.csv")){
files <- unzip("activity.zip")
}
df <- read.csv('activity.csv', sep = ',', header = TRUE, na.strings = NA, stringsAsFactors = FALSE)
library(dplyr)
library(ggplot2)
df1 <- tbl_df(df)
totalstepsbydate <- df1 %>% select(date, steps) %>% group_by(date) %>% summarise_if(is.numeric,sum,na.rm = TRUE)%>%ungroup()
meanstepsbydate <- df1 %>% select(date, steps) %>% group_by(date) %>% summarise_if(is.numeric,mean,na.rm = TRUE)%>%ungroup()
medianstepsbydate <- df1 %>% select(date, steps) %>% group_by(date) %>% summarise_if(is.numeric,median,na.rm = TRUE)%>%ungroup()
## ggplot2
m <- ggplot(totalstepsbydate, aes(date))
m + geom_bar(aes(weight = steps), stat = "count") + ylab("steps") + xlab("date") + ggtitle('Total steps at various days')
df1
average_daily_activity_pattern <- df1 %>% select(steps, interval) %>% group_by(interval) %>% summarise_if(is.numeric,mean,na.rm = TRUE)%>%ungroup()
average_daily_activity_pattern
tail(average_daily_activity_pattern)
is.na(average_daily_activity_pattern)
average_daily_activity_pattern
?ggplot
?aes
which.max(average_daily_activity_pattern$steps)
timeMostSteps <-  gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", averageStepsPerTimeBlock[which.max(average_daily_activity_pattern$steps),'interval'])
gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", average_daily_activity_pattern[which.max(average_daily_activity_pattern$steps),'interval'])
?gsub
average_daily_activity_pattern$interval
moststeps
moststeps
moststeps <- which.max(average_daily_activity_pattern$steps)
timeMostSteps <-  gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", average_daily_activity_pattern[moststeps,'interval'])
timeMostSteps
average_daily_activity_pattern$interval[1:5]
average_daily_activity_pattern <- df1 %>% select(steps, interval) %>% group_by(interval) %>% summarise_if(is.numeric,mean,na.rm = TRUE)%>%ungroup()
## ggplot2
g <- ggplot(average_daily_activity_pattern, aes(x = interval, y = steps))
g + geom_line() + xlabs("Interval of Day") + ylabs("Mean steps as per interval") + ggtitle("average_daily_activity_pattern")
average_daily_activity_pattern <- df1 %>% select(steps, interval) %>% group_by(interval) %>% summarise_if(is.numeric,mean,na.rm = TRUE)%>%ungroup()
## ggplot2
g <- ggplot(average_daily_activity_pattern, aes(x = interval, y = steps))
g + geom_line() + xlab("Interval of Day") + ylab("Mean steps as per interval") + ggtitle("average_daily_activity_pattern")
plot(aggregatedTotalStepsByInterval$interval, aggregatedTotalStepsByInterval$steps, type = "l")
title(main = "average_daily_activity_pattern", xlab = "Interval of Day", ylab = "Mean steps as per interval")
aggregatedTotalStepsByInterval <-  aggregate(steps~interval, df, FUN=mean, na.rm=TRUE, na.action=na.pass)
# base plot system
plot(aggregatedTotalStepsByInterval$interval, aggregatedTotalStepsByInterval$steps, type = "l")
title(main = "average_daily_activity_pattern", xlab = "Interval of Day", ylab = "Mean steps as per interval")
plot(aggregatedTotalStepsByInterval$interval, aggregatedTotalStepsByInterval$steps, type = "l")
title(main = "average_daily_activity_pattern")
title(main = "average_daily_activity_pattern",  xlab = "Interval of Day", ylab = "Mean steps as per interval")
plot(aggregatedTotalStepsByInterval$interval, aggregatedTotalStepsByInterval$steps, type = "l")
plot(aggregatedTotalStepsByInterval$interval, aggregatedTotalStepsByInterval$steps, type = "l", main = "average_daily_activity_pattern",  xlab = "Interval of Day", ylab = "Mean steps as per interval")
head(aggregatedTotalStepsByInterval)
gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", average_daily_activity_pattern[moststeps,'interval'])
gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", average_daily_activity_pattern[moststeps,interval])
gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", average_daily_activity_pattern['moststeps','interval'])
moststeps
aggregatedTotalStepsByInterval[moststeps]
aggregatedTotalStepsByInterval[moststeps,]
aggregatedTotalStepsByInterval[moststeps,'interval']
aggregatedTotalStepsByInterval[moststeps,'interval']%60
aggregatedTotalStepsByInterval[moststeps,'interval']%%60
24*60
24*60/5
dim(aggregatedTotalStepsByInterval)
?paste
aggregatedTotalStepsByInterval[moststeps,'interval'] / 60
as.integer(aggregatedTotalStepsByInterval[moststeps,'interval'] / 60)
timeWhenmoststeps <- paste(as.character(as.integer(aggregatedTotalStepsByInterval[moststeps,'interval']/60)), as.character(aggregatedTotalStepsByInterval[moststeps,'interval'] %% 60), sep = ":")
timeWhenmoststeps
g <- ggplot(totalstepsbydate, aes(x = date))
g + geom_bar(aes(weight = steps), stat = "count") + ylab("steps") + xlab("date") + ggtitle('Total steps at various days')
head(as.POSIXlt(dfImputed$date)$wday)
as.POSIXlt(dfImputed$date)$wday[1:5,]
dfImputed <- df
dfImputed$steps <- impute(df$steps, fun=mean)
aggregatedTotalStepsByDayImputed <- aggregate(steps~date, dfImputed, FUN=sum, na.rm=TRUE, na.action=na.pass)
aggregatedmeanStepsByDayImputed <- aggregate(steps~date, dfImputed, FUN=mean, na.rm=TRUE, na.action=na.pass)
aggregatedmeadianStepsByDayImpute <- aggregate(steps~date, dfImputed, FUN=median, na.rm=TRUE, na.action=na.pass)
barplot(height=aggregatedTotalStepsByDay$steps, names.arg=aggregatedTotalStepsByDay$date, xlab="date", ylab=expression('steps'),main=expression('Total steps at various days'))
dfImputed$dayType <-  ifelse(as.POSIXlt(dfImputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
barplot(height=aggregatedTotalStepsByDayImputed$steps, names.arg=aggregatedTotalStepsByDay$date, xlab="date", ylab=expression('steps'),main=expression('Total steps at various days'))
dfImputed$dayType <-  ifelse(as.POSIXlt(dfImputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
head(df)
head(dfImputed)
dfImputed$steps <- impute(df$steps, fun=mean)
library(Hmisc)
dfImputed$steps <- impute(df$steps, fun=mean)
head(dfImputed)
dfImputed <- df
dfImputed$steps <- impute(df$steps, fun=mean)
aggregatedTotalStepsByDayImputed <- aggregate(steps~date, dfImputed, FUN=sum, na.rm=TRUE, na.action=na.pass)
aggregatedmeanStepsByDayImputed <- aggregate(steps~date, dfImputed, FUN=mean, na.rm=TRUE, na.action=na.pass)
aggregatedmedianStepsByDayImpute <- aggregate(steps~date, dfImputed, FUN=median, na.rm=TRUE, na.action=na.pass)
barplot(height=aggregatedTotalStepsByDayImputed$steps, names.arg=aggregatedTotalStepsByDay$date, xlab="date", ylab=expression('steps'),main=expression('Total steps at various days'))
dfImputed$dayType <-  ifelse(as.POSIXlt(dfImputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
barplot(height=aggregatedTotalStepsByDayImputed$steps, names.arg=aggregatedTotalStepsByDayImputed$date, xlab="date", ylab=expression('steps'),main=expression('Total steps at various days'))
df <- read.csv('activity.csv', sep = ',', header = TRUE, na.strings = NA, stringsAsFactors = FALSE)
aggregatedTotalStepsByDay <- aggregate(steps~date, df, FUN=sum, na.rm=TRUE, na.action=na.pass)
aggregatedmeanStepsByDay <- aggregate(steps~date, df, FUN=mean, na.rm=TRUE, na.action=na.pass)
aggregatedmedianStepsByDay <- aggregate(steps~date, df, FUN=median, na.rm=TRUE, na.action=na.pass)
barplot(height=aggregatedTotalStepsByDay$steps, names.arg=aggregatedTotalStepsByDay$date, xlab="date", ylab=expression('steps'),main=expression('Total steps at various days'))
head(df)
numMissingValues <- length(which(is.na(df$steps)))
# To fill NAs we will take the mean of total dataset and put it to replace the NAs
dfImputed <- df
dfImputed$steps <- impute(df$steps, fun=mean)
aggregatedTotalStepsByDayImputed <- aggregate(steps~date, dfImputed, FUN=sum, na.rm=TRUE, na.action=na.pass)
aggregatedmeanStepsByDayImputed <- aggregate(steps~date, dfImputed, FUN=mean, na.rm=TRUE, na.action=na.pass)
aggregatedmedianStepsByDayImpute <- aggregate(steps~date, dfImputed, FUN=median, na.rm=TRUE, na.action=na.pass)
barplot(height=aggregatedTotalStepsByDayImputed$steps, names.arg=aggregatedTotalStepsByDayImputed$date, xlab="date", ylab=expression('steps'),main=expression('Total steps at various days'))
dfImputed$dayType <-  ifelse(as.POSIXlt(dfImputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
aggregatedDataImputed <- aggregate(steps ~ interval + dayType, data=dfImputed, mean)
# base plot system
plot(aggregatedTotalStepsByInterval$interval, aggregatedTotalStepsByInterval$steps, type = "l", main = "average_daily_activity_pattern",  xlab = "Interval of Day", ylab = "Mean steps as per interval")
plot(aggregatedTotalStepsByInterval$interval, aggregatedTotalStepsByInterval$steps, type = "l", main = "average_daily_activity_pattern",  xlab = "Interval of Day", ylab = "Mean steps as per interval")
numMissingValues <- length(which(is.na(df1$steps)))
df1Imputed <- df1
df1Imputed$steps <- impute(df1$steps, fun=mean)
totalstepsbydateImputed <- df1Imputed %>% select(date, steps) %>% group_by(date) %>% summarise_if(is.numeric,sum,na.rm = TRUE)%>%ungroup()
meanstepsbydateImputed <- df1Imputed %>% select(date, steps) %>% group_by(date) %>% summarise_if(is.numeric,mean,na.rm = TRUE)%>%ungroup()
medianstepsbydateImputed <- df1Imputed %>% select(date, steps) %>% group_by(date) %>% summarise_if(is.numeric,median,na.rm = TRUE)%>%ungroup()
## ggplot2
g <- ggplot(totalstepsbydateImputed, aes(x = date))
g + geom_bar(aes(weight = steps), stat = "count") + ylab("steps") + xlab("date") + ggtitle('Total steps at various days')
df1Imputed$dayType <-  ifelse(as.POSIXlt(df1Imputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
aggregatedDataImputed <- df1Imputed %>% group_by(dayType,interval) %>% summarise_if(is.numeric,mean,na.rm = TRUE)%>%ungroup()
ggplot(aggregatedDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(dayType ~ .) +
xlab("Interval of Day") +
ylab("Mean steps as per interval" +
ggtitle("average_daily_activity_pattern by weekdays and interval"))
df1Imputed$dayType <-  ifelse(as.POSIXlt(df1Imputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
aggregatedDataImputed <- df1Imputed %>% group_by(dayType,interval) %>% summarise_if(is.numeric,mean,na.rm = TRUE)%>%ungroup()
ggplot(aggregatedDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(dayType ~ .) +
xlab("Interval of Day") +
ylab("Mean steps as per interval" + ggtitle("average_daily_activity_pattern by weekdays and interval"))
df1Imputed$dayType <-  ifelse(as.POSIXlt(df1Imputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
aggregatedDataImputed <- df1Imputed %>% group_by(dayType,interval) %>% summarise_if(is.numeric,mean,na.rm = TRUE)%>%ungroup()
ggplot(aggregatedDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(dayType ~ .) +
xlab("Interval of Day") +
ylab("Mean steps as per interval") +
ggtitle("average_daily_activity_pattern by weekdays and interval")
dfImputed <- df
dfImputed$steps <- impute(df$steps, fun=mean)
aggregatedTotalStepsByDayImputed <- aggregate(steps~date, dfImputed, FUN=sum, na.rm=TRUE, na.action=na.pass)
aggregatedmeanStepsByDayImputed <- aggregate(steps~date, dfImputed, FUN=mean, na.rm=TRUE, na.action=na.pass)
aggregatedmedianStepsByDayImpute <- aggregate(steps~date, dfImputed, FUN=median, na.rm=TRUE, na.action=na.pass)
barplot(height=aggregatedTotalStepsByDayImputed$steps, names.arg=aggregatedTotalStepsByDayImputed$date, xlab="date", ylab=expression('steps'),main=expression('Total steps at various days'))
head(aggregatedDataImputed)
head(df)
dim(aggregatedDataImputed)
dim(df)
288*2
dtype(aggregatedDataImputed)
summary(aggregatedDataImputed)
unique(aggregatedDataImputed$dayType)
dfImputed <- df
dfImputed$steps <- impute(df$steps, fun=mean)
aggregatedTotalStepsByDayImputed <- aggregate(steps~date, dfImputed, FUN=sum, na.rm=TRUE, na.action=na.pass)
aggregatedmeanStepsByDayImputed <- aggregate(steps~date, dfImputed, FUN=mean, na.rm=TRUE, na.action=na.pass)
aggregatedmedianStepsByDayImpute <- aggregate(steps~date, dfImputed, FUN=median, na.rm=TRUE, na.action=na.pass)
barplot(height=aggregatedTotalStepsByDayImputed$steps, names.arg=aggregatedTotalStepsByDayImputed$date, xlab="date", ylab=expression('steps'),main=expression('Total steps at various days'))
dfImputed$dayType <-  ifelse(as.POSIXlt(dfImputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
aggregatedDataImputed <- aggregate(steps ~ interval + dayType, data=dfImputed, mean)
# base plot system
par(mfrow = c(1,2), mar =c(4,4,2,1), oma = c(0,0,2,0))
aggregatedTotalStepsByIntervalNWeekday <- subset(aggregatedDataImputed, dayType == "weekday")
aggregatedTotalStepsByIntervalNWeekend <- subset(aggregatedDataImputed, dayType == "weekend")
plot(aggregatedTotalStepsByIntervalNWeekday$interval, aggregatedTotalStepsByIntervalNWeekday$steps, type = "l", main = "average_daily_activity_pattern by weekdays and interval",  xlab = "Interval of Day", ylab = "Mean steps as per interval")
plot(aggregatedTotalStepsByIntervalNWeekend$interval, aggregatedTotalStepsByIntervalNWeekend$steps, type = "l", main = "average_daily_activity_pattern by weekends and interval",  xlab = "Interval of Day", ylab = "Mean steps as per interval")
dfImputed$dayType <-  ifelse(as.POSIXlt(dfImputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
aggregatedDataImputed <- aggregate(steps ~ interval + dayType, data=dfImputed, mean)
# base plot system
par(mfrow = c(2,1), mar =c(4,4,2,1), oma = c(0,0,2,0))
aggregatedTotalStepsByIntervalNWeekday <- subset(aggregatedDataImputed, dayType == "weekday")
aggregatedTotalStepsByIntervalNWeekend <- subset(aggregatedDataImputed, dayType == "weekend")
plot(aggregatedTotalStepsByIntervalNWeekday$interval, aggregatedTotalStepsByIntervalNWeekday$steps, type = "l", main = "average_daily_activity_pattern by weekdays and interval",  xlab = "Interval of Day", ylab = "Mean steps as per interval")
plot(aggregatedTotalStepsByIntervalNWeekend$interval, aggregatedTotalStepsByIntervalNWeekend$steps, type = "l", main = "average_daily_activity_pattern by weekends and interval",  xlab = "Interval of Day", ylab = "Mean steps as per interval")
dfImputed$dayType <-  ifelse(as.POSIXlt(dfImputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
aggregatedDataImputed <- aggregate(steps ~ interval + dayType, data=dfImputed, mean)
# base plot system
par(mfrow = c(2,1), mar =c(4,4,2,1), oma = c(0,0,0,0))
aggregatedTotalStepsByIntervalNWeekday <- subset(aggregatedDataImputed, dayType == "weekday")
aggregatedTotalStepsByIntervalNWeekend <- subset(aggregatedDataImputed, dayType == "weekend")
plot(aggregatedTotalStepsByIntervalNWeekday$interval, aggregatedTotalStepsByIntervalNWeekday$steps, type = "l", main = "average_daily_activity_pattern by weekdays and interval",  xlab = "Interval of Day", ylab = "Mean steps as per interval")
plot(aggregatedTotalStepsByIntervalNWeekend$interval, aggregatedTotalStepsByIntervalNWeekend$steps, type = "l", main = "average_daily_activity_pattern by weekends and interval",  xlab = "Interval of Day", ylab = "Mean steps as per interval")
# base plot system
par(mfrow = c(2,1), mar =c(2,2,1,1), oma = c(0,0,0,0))
aggregatedTotalStepsByIntervalNWeekday <- subset(aggregatedDataImputed, dayType == "weekday")
aggregatedTotalStepsByIntervalNWeekend <- subset(aggregatedDataImputed, dayType == "weekend")
plot(aggregatedTotalStepsByIntervalNWeekday$interval, aggregatedTotalStepsByIntervalNWeekday$steps, type = "l", main = "average_daily_activity_pattern by weekdays and interval",  xlab = "Interval of Day", ylab = "Mean steps as per interval")
plot(aggregatedTotalStepsByIntervalNWeekend$interval, aggregatedTotalStepsByIntervalNWeekend$steps, type = "l", main = "average_daily_activity_pattern by weekends and interval",  xlab = "Interval of Day", ylab = "Mean steps as per interval")
# base plot system
par(mfrow = c(2,1), mar =c(4,2,1,1), oma = c(0,0,0,0))
aggregatedTotalStepsByIntervalNWeekday <- subset(aggregatedDataImputed, dayType == "weekday")
aggregatedTotalStepsByIntervalNWeekend <- subset(aggregatedDataImputed, dayType == "weekend")
plot(aggregatedTotalStepsByIntervalNWeekday$interval, aggregatedTotalStepsByIntervalNWeekday$steps, type = "l", main = "average_daily_activity_pattern by weekdays and interval",  xlab = "Interval of Day", ylab = "Mean steps as per interval")
plot(aggregatedTotalStepsByIntervalNWeekend$interval, aggregatedTotalStepsByIntervalNWeekend$steps, type = "l", main = "average_daily_activity_pattern by weekends and interval",  xlab = "Interval of Day", ylab = "Mean steps as per interval")
source('C:/Users/hp/datasciencecoursera/Course5(Reproducible Research)/Week 2/x2.R')
source('C:/Users/hp/datasciencecoursera/Course5(Reproducible Research)/Week 2/CourseProject1_basePlot.R')
barplot(height=aggregatedTotalStepsByDay$steps, names.arg=aggregatedTotalStepsByDay$date, xlab="date", ylab=expression('steps'),main=expression('Total steps at various days'))
barplot(height=aggregatedTotalStepsByDay$steps, names.arg=aggregatedTotalStepsByDay$date, xlab="date", ylab=expression('steps'),main=expression('Total steps at various days'))
plot.new()
barplot(height=aggregatedTotalStepsByDay$steps, names.arg=aggregatedTotalStepsByDay$date, xlab="date", ylab=expression('steps'),main=expression('Total steps at various days'))
barplot(height=aggregatedTotalStepsByDay$steps, names.arg=aggregatedTotalStepsByDay$date, xlab="date", ylab=expression('steps'),main=expression('Total steps at various days'))
barplot(height=aggregatedTotalStepsByDay$steps, names.arg=aggregatedTotalStepsByDay$date, xlab="date", ylab=expression('steps'),main=expression('Total steps at various days'))
dev.off()
barplot(height=aggregatedTotalStepsByDay$steps, names.arg=aggregatedTotalStepsByDay$date, xlab="date", ylab=expression('steps'),main=expression('Total steps at various days'))
hist(aggregatedTotalStepsByDay$date, xlab="date", ylab=expression('steps'),main=expression('Total steps at various days'))
hist(aggregatedTotalStepsByDay$steps, xlab="date", ylab=expression('steps'),main=expression('Total steps at various days'))
?hist
source('C:/Users/hp/datasciencecoursera/Course5(Reproducible Research)/Week 2/CourseProject1_basePlot.R')
stepsByDayMean <- mean(aggregatedTotalStepsByDay)
stepsByDayMedian <- median(aggregatedTotalStepsByDay)
print(paste0("Mean Steps by day is: ", stepsByDayMean))
cat("Median Steps by day is: ", stepsByDayMedian)
stepsByDayMean <- mean(aggregatedTotalStepsByDay$steps)
stepsByDayMedian <- median(aggregatedTotalStepsByDay$steps)
print(paste0("Mean Steps by day is: ", stepsByDayMean))
cat("Median Steps by day is: ", stepsByDayMedian)
dev.off()
barplot(height=aggregatedTotalStepsByDay$steps, names.arg=aggregatedTotalStepsByDay$date, xlab="date", ylab=expression('steps'),main=expression('Total steps at various days'))
setwd("C:/Users/hp/datasciencecoursera/Course5(Reproducible Research)/Week 2")
if (!file.exists("activity.zip"))
{
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip")
}
if(!file.exists("activity.csv")){
files <- unzip("activity.zip")Reproducible Research: Peer Assessment 1
================================================================
## Loading dependant packages
```{r, loading_dependant_packages}
library(ggplot2)
library(scales)
library(Hmisc)
```
## Setting up present working directory
```{r, pwd setting}
setwd("C:/Users/hp/datasciencecoursera/Course5(Reproducible Research)/Week 2")
```
## Loading and preprocessing the data
### 1. Load the data (i.e. read.csv())
```{r, loading_data}
if (!file.exists("activity.zip"))
{
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip")
}
if(!file.exists("activity.csv")){
files <- unzip("activity.zip")
}
df <- read.csv('activity.csv', sep = ',', header = TRUE, na.strings = NA, stringsAsFactors = FALSE)
```
### 2. Process/transform the data (if necessary) into a format suitable for your  analysis
```{r, data_wrangling}
#df$interval <- strptime(gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", activityData$interval), format='%H:%M')
```
### What is total number of steps taken per day?
```{r, aggregating by date}
aggregatedTotalStepsByDay <- aggregate(steps~date, df, FUN=sum, na.rm=TRUE, na.action=na.pass)
```
### 1. Make a histogram of the total number of steps taken each day
```{r, resetting device and making histogram}
# Using base Plot
dev.off()
barplot(height=aggregatedTotalStepsByDay$steps, names.arg=aggregatedTotalStepsByDay$date, xlab="date", ylab=expression('steps'),main=expression('Total steps at various days'))
```
### 2. Calculate and report the mean and median total number of steps taken per day
```{r, reporting mean, median}
aggregatedmeanStepsByDay <- aggregate(steps~date, df, FUN=mean, na.rm=TRUE, na.action=na.pass)
aggregatedmedianStepsByDay <- aggregate(steps~date, df, FUN=median, na.rm=TRUE, na.action=na.pass)
stepsByDayMean <- mean(aggregatedTotalStepsByDay$steps)
stepsByDayMedian <- median(aggregatedTotalStepsByDay$steps)
print(paste0("Mean Steps by day is: ", stepsByDayMean))
cat("Median Steps by day is: ", stepsByDayMedian)
```
## What is the average daily activity pattern?
```{r, average daily activity pattern}
aggregatedTotalStepsByInterval <-  aggregate(steps~interval, df, FUN=mean, na.rm=TRUE, na.action=na.pass)
```
### 1. Make a time series plot
```{r, making time series plot}
# using base plot
plot(aggregatedTotalStepsByInterval$interval, aggregatedTotalStepsByInterval$steps, type = "l", main = "average_daily_activity_pattern",  xlab = "Interval of Day", ylab = "Mean steps as per interval")
```
### 2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r, reporting max steps in 5 minutes interval}
moststeps <- which.max(aggregatedTotalStepsByInterval$steps)
timeWhenmoststeps <- paste(as.character(as.integer(aggregatedTotalStepsByInterval[moststeps,'interval']/60)), as.character(aggregatedTotalStepsByInterval[moststeps,'interval'] %% 60), sep = ":")
cat("time when max no. of Steps by day is: ", timewhenmoststeps)
```
## Imputing missing values
### 1. Calculate and report the total number of missing values in the dataset
```{r, reporting missing values}
numMissingValues <- length(which(is.na(df$steps)))
cat("number of missing values in Steps by day is: ", numMissingValues)
```
### 2. Devise a strategy for filling in all of the missing values in the dataset.
To fill NAs we will take the mean of total dataset and put it to replace the NAs
### 3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r, imputing missing values}
dfImputed <- df
dfImputed$steps <- impute(df$steps, fun=mean)
```
### 4. Make a histogram of the total number of steps taken each day
```{r, histogram of steps taken each day}
aggregatedTotalStepsByDayImputed <- aggregate(steps~date, dfImputed, FUN=sum, na.rm=TRUE, na.action=na.pass)
# using base plot system
barplot(height=aggregatedTotalStepsByDayImputed$steps, names.arg=aggregatedTotalStepsByDayImputed$date, xlab="date", ylab=expression('steps'),main=expression('Total steps at various days'))
```
### ... and Calculate and report the mean and median total number of steps taken per day.
```{r, reporting mean and median}
aggregatedmeanStepsByDayImputed <- aggregate(steps~date, dfImputed, FUN=mean, na.rm=TRUE, na.action=na.pass)
aggregatedmedianStepsByDayImpute <- aggregate(steps~date, dfImputed, FUN=median, na.rm=TRUE, na.action=na.pass)
stepsByDayMeanImputed <- mean(aggregatedTotalStepsByDayImputed$steps)
stepsByDayMedianImputed <- median(aggregatedTotalStepsByDayImputed$steps)
cat("Mean of imputed Steps by day is: ", stepsByDayMeanImputed)
cat("Median of imputed Steps by day is: ", stepsByDayMedianImputed)
```
## Are there differences in activity patterns between weekdays and weekends?
### 1. Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
```{r,creating factor label}
dfImputed$dayType <-  ifelse(as.POSIXlt(dfImputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
```
### 2. Make a panel plot containing a time series plot
```{r, making facet based time series plot}
aggregatedDataImputed <- aggregate(steps ~ interval + dayType, data=dfImputed, mean)
# base plot system
par(mfrow = c(2,1), mar =c(4,4,2,1), oma = c(0,0,0,0))
aggregatedTotalStepsByIntervalNWeekday <- subset(aggregatedDataImputed, dayType == "weekday")
aggregatedTotalStepsByIntervalNWeekend <- subset(aggregatedDataImputed, dayType == "weekend")
plot(aggregatedTotalStepsByIntervalNWeekday$interval, aggregatedTotalStepsByIntervalNWeekday$steps, type = "l", main = "average_daily_activity_pattern by weekdays and interval",  xlab = "Interval of Day", ylab = "Mean steps as per interval")
plot(aggregatedTotalStepsByIntervalNWeekend$interval, aggregatedTotalStepsByIntervalNWeekend$steps, type = "l", main = "average_daily_activity_pattern by weekends and interval",  xlab = "Interval of Day", ylab = "Mean steps as per interval")
```
}
df <- read.csv('activity.csv', sep = ',', header = TRUE, na.strings = NA, stringsAsFactors = FALSE)
library(dplyr)
library(ggplot2)
library(stats)
library(Hmisc)
library(scales)
df1 <- tbl_df(df)
totalstepsbydate <- df1 %>% select(date, steps) %>% group_by(date) %>% summarise_if(is.numeric,sum,na.rm = TRUE)%>%ungroup()
meanstepsbydate <- df1 %>% select(date, steps) %>% group_by(date) %>% summarise_if(is.numeric,mean,na.rm = TRUE)%>%ungroup()
medianstepsbydate <- df1 %>% select(date, steps) %>% group_by(date) %>% summarise_if(is.numeric,median,na.rm = TRUE)%>%ungroup()
## ggplot2
g <- ggplot(totalstepsbydate, aes(x = date))
g + geom_bar(aes(weight = steps), stat = "count") + ylab("steps") + xlab("date") + ggtitle('Total steps at various days')
average_daily_activity_pattern <- df1 %>% select(steps, interval) %>% group_by(interval) %>% summarise_if(is.numeric,mean,na.rm = TRUE)%>%ungroup()
## ggplot2
g <- ggplot(average_daily_activity_pattern, aes(x = interval, y = steps))
g + geom_line() + xlab("Interval of Day") + ylab("Mean steps as per interval") + ggtitle("average_daily_activity_pattern")
moststeps <- which.max(average_daily_activity_pattern$steps)
timeWhenmoststeps <- paste(as.character(as.integer(aggregatedTotalStepsByInterval[moststeps,'interval']/60)), as.character(aggregatedTotalStepsByInterval[moststeps,'interval'] %% 60), sep = ":")
numMissingValues <- length(which(is.na(df1$steps)))
# To fill NAs we will take the mean of total dataset and put it to replace the NAs
df1Imputed <- df1
df1Imputed$steps <- impute(df1$steps, fun=mean)
totalstepsbydateImputed <- df1Imputed %>% select(date, steps) %>% group_by(date) %>% summarise_if(is.numeric,sum,na.rm = TRUE)%>%ungroup()
meanstepsbydateImputed <- df1Imputed %>% select(date, steps) %>% group_by(date) %>% summarise_if(is.numeric,mean,na.rm = TRUE)%>%ungroup()
medianstepsbydateImputed <- df1Imputed %>% select(date, steps) %>% group_by(date) %>% summarise_if(is.numeric,median,na.rm = TRUE)%>%ungroup()
## ggplot2
g <- ggplot(totalstepsbydateImputed, aes(x = date))
g + geom_bar(aes(weight = steps), stat = "count") + ylab("steps") + xlab("date") + ggtitle('Total steps at various days')
df1Imputed$dayType <-  ifelse(as.POSIXlt(df1Imputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
aggregatedDataImputed <- df1Imputed %>% group_by(dayType,interval) %>% summarise_if(is.numeric,mean,na.rm = TRUE)%>%ungroup()
ggplot(aggregatedDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(dayType ~ .) +
xlab("Interval of Day") +
ylab("Mean steps as per interval") +
ggtitle("average_daily_activity_pattern by weekdays and interval")
g <- ggplot(totalstepsbydate, aes(x = date))
g + geom_bar(aes(weight = steps), stat = "count") + ylab("steps") + xlab("date") + ggtitle('Total steps at various days')
g <- ggplot(average_daily_activity_pattern, aes(x = interval, y = steps))
g + geom_line() + xlab("Interval of Day") + ylab("Mean steps as per interval") + ggtitle("average_daily_activity_pattern")
g <- ggplot(totalstepsbydateImputed, aes(x = date))
g + geom_bar(aes(weight = steps), stat = "count") + ylab("steps") + xlab("date") + ggtitle('Total steps at various days')
ggplot(aggregatedDataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(dayType ~ .) +
xlab("Interval of Day") +
ylab("Mean steps as per interval") +
ggtitle("average_daily_activity_pattern by weekdays and interval")
